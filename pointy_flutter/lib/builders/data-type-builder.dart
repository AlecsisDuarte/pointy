import 'package:build/build.dart';

/// The builder factory used by the `build.yaml` script.
Builder simpleBuilder(BuilderOptions options) => SimpleBuilder();

/// A trivial builder which copies the contents of a `spec` file into a `dart` file.
class SimpleBuilder extends Builder {
  @override
  Map<String, List<String>> get buildExtensions => const <String, List<String>>{
        '.data': <String>['.dart']
      };

  String getFromMapAddition(String input) {
    switch(input) {
      case "bool":
        return " ?? false";
      case "int":
        return " ?? 0";
      default:
        return "";
    }
  }

  String getDefaultModifier(String input) {
    switch(input) {
      case "bool":
        return " = false";
      case "int":
        return " = 0";
      default:
        return "";
    }
  }

  @override
  Future<void> build(BuildStep buildStep) async {
    final String s = buildStep.inputId.pathSegments.last.split(".").first;
    final String typeName = '${s[0].toUpperCase()}${s.substring(1)}';

    print('----BUILDING---- $typeName');
    // The asset id identifies
    //final AssetId output = buildStep.inputId.changeExtension('.dart');

    // INPUT EXAMPLES:
    // name:String
    // age:int

    final String contents = await buildStep.readAsString(buildStep.inputId);
    print("GOT CONTENTS: $contents");
    final lines = contents.split("\n");

    var members = lines.map((l) => l.split(':'));
    Map<String, String> mappings = Map<String, String>();
    members.forEach((line) => mappings.addAll({line.first: line.last.trim()}));

    var output = '''
// Generated by itsjason
// import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';

class $typeName {

  String id;
''';
  
  mappings.forEach(
      (memberName, memberType) => output += "\t$memberType $memberName${getDefaultModifier(memberType)};\n");

    var propertiesString = mappings.entries
        .map((value) => "this.${value.key}")
        .join(", ");
    output += "\n\t$typeName({$propertiesString});\n\n";

    output += '''
  $typeName.fromMap(String id, Map<dynamic, dynamic> map)
      : id = id,
      ''';

    var mapInputs = mappings.entries.map((e) => "${e.key} = map['${e.key}']" + getFromMapAddition(e.value));
    output += mapInputs.join(",\n\t\t\t") + ";\n\n";

    output += '''
  Map<String, dynamic> toMap() => {
    "id": this.id, 
    ''';

  // "imageUrl": imageUrl
  var mapParams = mappings.entries.map((e) => '"${e.key}": this.${e.key}');
  output += mapParams.join(",\n\t\t");

  output += '''
  };

  @override
  String toString() => "$typeName<id:\$id>";

  static StreamTransformer<DocumentSnapshot, $typeName> getTransformer() {
    final trans = StreamTransformer.fromHandlers(
        handleData: (DocumentSnapshot snapshot, EventSink<$typeName> sink) {
      if (snapshot.data == null) return;

      final result = $typeName.fromMap(snapshot.documentID, snapshot.data);
      sink.add(result);
    });
    return trans;
  }

  static Stream<$typeName> getDocumentStream(Firestore firestore, String path) {
    final transformer =
        firestore.document(path).snapshots().transform(getTransformer());
    return transformer;
  }

  static Stream<Map<String, $typeName>> getCollectionStream(
      Firestore firestore, String path) {
    final transformer = firestore.collection(path).snapshots().transform(
        StreamTransformer.fromHandlers(handleData: handleCollectionTransform));
    return transformer;
  }

  static void handleCollectionTransform(
      QuerySnapshot snapshot, EventSink<Map<String, $typeName>> sink) {
    var result = Map<String, $typeName>();
    snapshot.documents.forEach((doc) {
      result[doc.documentID] = $typeName.fromMap(doc.documentID, doc.data);
    });
    sink.add(result);
  }
}
    ''';

    final AssetId outputAssetId = buildStep.inputId.changeExtension('.dart');
    await buildStep.writeAsString(outputAssetId, output);
    print("BOOM DONE");
  }
}
